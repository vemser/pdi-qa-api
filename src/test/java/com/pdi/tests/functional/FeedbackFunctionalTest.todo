package com.pdi.tests.functional;

import com.pdi.tests.client.FeedbackClient;
import com.pdi.tests.data.factory.FeedbackDataFactory;
import com.pdi.tests.model.responses.FeedbackResponse;
import io.qameta.allure.Epic;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

// TODO: finalizar implementação (endpoint instável)
// Lógica, mapeamento e endpoints pronto. Apenas finalizar futuramente em review com time de backend.
// DICA: só renomear a extensão do arquivo de ".todo" para ".java"
public class FeedbackFunctionalTest {
    private final FeedbackClient feedbackClient = new FeedbackClient();
    private final FeedbackDataFactory feedbackDataFactory = new FeedbackDataFactory();

    // TODO: implementar futuramente método de listar todos os feedbacks
//    @Test
//    @Epic("Feedback")
//    @Owner("Bruno Moraes Scarpari")
//    @DisplayName("Validar contrato do retorno de todos os feedbacks")
//    public void testValidateAValidCaseOfListAllFeedbacksContract() {
//        FeedbackResponse feedbackResponse = feedbackClient.searchAll()
//                .then()
//                    .log().body()
//                    .assertThat().statusCode(HttpStatus.SC_OK)
//                    .extract().as(FeedbackResponse.class)
//                ;
//
//        Assertions.assertAll(
//                () -> Assertions.assertNotNull(feedbackResponse)
//        );
//    }

    @Test
    @Epic("Feedback")
    @Severity(SeverityLevel.BLOCKER)
    @Owner("Bruno Moraes Scarpari")
    @DisplayName("Adiciona um feedback para um módulo")
    public void testAdicionarUmFeedbackParaUmModulo() {
        var feedback = FeedbackDataFactory.feedbackValido();
        var feedbackId = String.valueOf(feedback.getId());

        FeedbackResponse feedbackResponse = feedbackClient.addFeedback(feedback)
                .then()
                    .log().body()
                    .assertThat().statusCode(HttpStatus.SC_OK)
                    .extract().as(FeedbackResponse.class)
                ;

        Assertions.assertNotNull(feedbackResponse);

        feedbackClient.deleteFeedback(feedbackId)
                .then()
                    .log().body()
                    .assertThat().statusCode(HttpStatus.SC_OK)
                    .extract().as(FeedbackResponse.class)
                ;
    }

    @Test
    @Epic("Feedback")
    @Severity(SeverityLevel.BLOCKER)
    @Owner("Bruno Moraes Scarpari")
    @DisplayName("Atualiza um feedback para um módulo")
    public void testAtualizarUmFeedbackParaUmModulo() {
        var feedback = FeedbackDataFactory.feedbackValido();

        FeedbackResponse feedbackResponse = feedbackClient.addFeedback(feedback)
                .then()
                    .log().body()
                    .assertThat().statusCode(HttpStatus.SC_OK)
                    .extract().as(FeedbackResponse.class)
                ;

        var feedbackId = String.valueOf(feedbackResponse.feedback.getId());

        FeedbackResponse feedbackUpdateResponse = feedbackClient.updateFeedback(feedbackId)
                .then()
                    .log().body()
                    .assertThat().statusCode(HttpStatus.SC_OK)
                    .extract().as(FeedbackResponse.class)
                ;

        var oldFeedback = feedbackResponse.feedback.getFeedback();
        var updatedFeedback = feedbackUpdateResponse.feedback.getFeedback();

        Assertions.assertAll(
                () -> Assertions.assertNotNull(feedbackUpdateResponse),
                () -> Assertions.assertNotEquals(oldFeedback, updatedFeedback)
        );

        feedbackClient.deleteFeedback(feedbackId)
                .then()
                    .log().body()
                    .assertThat().statusCode(HttpStatus.SC_OK)
                    .extract().as(FeedbackResponse.class)
                ;
    }

    @Test
    @Epic("Feedback")
    @Severity(SeverityLevel.BLOCKER)
    @Owner("Bruno Moraes Scarpari")
    @DisplayName("Deleta um feedback para um módulo")
    public void testDeletarUmFeedbackParaUmModulo() {
        var feedback = FeedbackDataFactory.feedbackValido();

        System.out.println("feedback: " + feedback.toString());

        FeedbackResponse feedbackResponse = feedbackClient.addFeedback(feedback)
                .then()
                    .log().body()
                    .assertThat().statusCode(HttpStatus.SC_OK)
                    .extract().as(FeedbackResponse.class)
                ;

        var feedbackId = String.valueOf(feedbackResponse.feedback.getId());

        feedbackClient.deleteFeedback(feedbackId)
                .then()
                    .log().body()
                    .assertThat().statusCode(HttpStatus.SC_OK)
                    .extract().as(FeedbackResponse.class)
                ;
    }
}
